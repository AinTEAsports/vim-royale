use crate::state::AppState;

pub fn str_to_vec_usize(string: String) -> Vec<usize> {
    let mut vec: Vec<usize> = vec![];

    for c in string.chars() {
        let digit = c.to_digit(10).unwrap_or(0) as usize;
        vec.push(digit);
    }

    return vec;
}

pub fn the_primeagen() -> Vec<Vec<usize>> {
    return vec![
        str_to_vec_usize("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".into()),
        str_to_vec_usize("0111111111111110111111001111110111111111111110000111111000000000011111101111111111111101111110000000000111111011111111111111000011111111110111111111111110000000001111111111111101111111111111111000111111111101111110000000000111111011111111111111011111111111111011111111111111011111111111111011111100000000001111110".into()),
        str_to_vec_usize("0112222222222110112211001122110112222222222110000112211111111110011221101122222222221101122111111111111112211011222222222211000011222222110112222222222110000000001122222222221101122222222222211000112222221101122111111111111112211011222222222211011222222222211011222222222211011222222222211011221111111111001122110".into()),
        str_to_vec_usize("0111111221111110112211001122110112211111111110000112222222222110011221101122111111221101122222222222222222211011221111111111000011112211110112211111111110000000001122111111221101122111111112211000111122111101122222222222222222211011221111111111011221111112211011221111111111011221111111111011222222222211001122110".into()),
        str_to_vec_usize("0000011221100000112211001122110112211000000000000112211111122110011221101122110011221101122111111221111112211011221100000000000000112211000112211000000000000000001122110011221101122110000112211000001122110001122111111221111112211011221100000000011221100112211011221100000000011221100000000011221111112211001122110".into()),
        str_to_vec_usize("0000011221100000112211111122110112211111111110000112211001122110011221101122111111221101122110011221100112211011221111111111000000112211000112211111111110000000001122111111221101122111111112211000001122110001122110011221100112211011221111111111011221111112211011221100000000011221111111111011221100112211001122110".into()),
        str_to_vec_usize("0000011221100000112222222222110112222222222110000112211001122110011221101122222222221101122110011221100112211011222222222211000000112211000112222222222110000000001122222222221101122222222222211000001122110001122110011221100112211011222222222211011222222222211011221100111111011222222222211011221100112211001122110".into()),
        str_to_vec_usize("0000011221100000112211111122110112211111111110000112211001122110011221101122111111221101122110011111100112211011221111111111000000112211000111111111122110000000001122111111111101122111111221111000001122110001122110011111100112211011221111111111011221111112211011221100112211011221111111111011221100112211001122110".into()),
        str_to_vec_usize("0000011221100000112211001122110112211000000000000112211001122111111221101122110011221101122110000000000112211011221100000000000000112211000000000001122110111111001122110000000001122110011221100000001122110001122110000000000112211011221100000000011221100112211011221100112211011221100000000011221100112211111122110".into()),
        str_to_vec_usize("0000011221100000112211001122110112211111111110000112211001122222222221101122110011221101122110000000000112211011221111111111000011112211110111111111122110112211001122110000000001122110011221111110111122111101122110000000000112211011221111111111011221100112211011221111112211011221111111111011221100112222222222110".into()),
        str_to_vec_usize("0000011221100000112211001122110112222222222110000112211001111111111221101122110011221101122110000000000112211011222222222211000011222222110112222222222110111111001122110000000001122110011222222110112222221101122110000000000112211011222222222211011221100112211011222222222211011222222222211011221100111111111122110".into()),
        str_to_vec_usize("0000011111100000111111001111110111111111111110000111111000000000011111101111110011111101111110000000000111111011111111111111000011111111110111111111111110000011001111110000000001111110011111111110111111111101111110000000000111111011111111111111011111100111111011111111111111011111111111111011111100000000001111110".into()),
        str_to_vec_usize("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".into()),
    ];
}

pub fn scroll_strings(
    strings: Vec<Vec<usize>>,
    start_row: usize,
) -> impl FnMut(&AppState, usize) -> bool {
    let mut offset = 0;
    let rows = strings.len();
    let cols = strings[0].len();

    return move |state: &AppState, speed: usize| {
        let display_cols = state.terminal_display[0].len();

        offset += 1;

        for row in 0..rows {
            if display_cols > offset {
                for _ in 0..(cols - offset) {
                    state.terminal_display[row][offset].set(0);
                }
            }

            let row = start_row + row;
            let start = offset.saturating_sub(display_cols);

            if row >= state.terminal_display.len() {
                continue;
            }

            let mut display_offset = 0;
            for i in start..offset {
                let display_col = (display_cols.saturating_sub(offset) + display_offset).saturating_sub(1);
                display_offset += 1;

                if i < cols {
                    state.terminal_display[row][display_col].set(strings[row][i]);
                } else {
                    state.terminal_display[row][display_col].set(0);
                }
            }
        }

        let still_running = offset < cols + display_cols;
        if !still_running {
            offset = 0;
        }

        return still_running;
    };
}
